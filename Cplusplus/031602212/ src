
#include<string.h> 

#include<iostream>
#include<conio.h>

using namespace std;     


struct wordhh
{
    int pinlv[255];
    char danci[255];
    char zimu[255];
    string value[255];
    int bijiao=0;
};

int main()
{	
    struct wordhh s8;
    int c;   //字lingyige母数 
    FILE *fp,*s;
    int i,j=0;
    int word=0; //字符数 
    int words=0;//单词数 
    int flag=0;//字母数，当 flag》4这有可能是一个单词
	int hh=0; //最高频次的danci 
	int jj=0;  //用于比较的danci
  int hang=1;
    string filename;   //文件名 
    string buff; //存储暂时需要的 
    char x;
    char e1[255],e2[255];
    
    cout<<"输入文件路径"<<endl; 
	cin>>filename;

 
const char *u = filename.c_str();    //强制转化 成char*



if((fp=fopen(u,"r"))==NULL)      //fopen 函数，两个常指针 ，打不开文件则返回打不开 
{
	cout<<"文件好像打不开啊"<<endl;
	
}
   cout<<"文件内容是:"; 
   
   x=fgetc(fp);
   
    //一边统计字符数，一边转大写为小写 
	 do                         
	{    cout<<x;
		
		  while(x>=65&&x>=90)  //大→小 ,他有可能组成一个单词吗？ 
		   x=x+32;   //转大写 
		  
		 
		 
		  while(x>=97&&x<=122&&flag>=3) // 小写字母出现，差一个就有四个字母，或包括本字母已经有四个字母是一个合法的
             {  s8.zimu[flag]=x;
			    flag++;
                
                word++;
}
   	
		    
		  while(x>=97&&x<=122&&flag<3) // 还差一个字母就是合法的单词了 
		  { flag++;
		   s8.zimu[flag]=x;
		   word++;
		  
		  
		   }
		 
		while(flag<4&&(x>=0&&x<=47)||(x>=58&&x<=96)||(x>=123&&x<=255))  //4字母缺1,不是单词啦 
		   {
		    for(i=0;i<flag;i++)
		    {
		    	s8.zimu[i]=0;     //清零喽 
			}
			
			flag=0;
		   }
		 
		 
		 
		 	
		 
		 while(flag>=4&&(x>=0&&x<=47)||(x>=58&&x<=96)||(x>=123&&x<=254))  // 不是单词了 ,但是之前已经构成一个单词 
		 {
		 
		 	words++  ; 
		 	
			s8.value[words] =s8.zimu;    // cunjinqu
		 		
			 
		 	
		 	
		 	for(i=0;i<flag;i++)
		    {
		    	s8.zimu[i]=0;     //清零喽 
			}
			
			flag==0;
		   }
		
		
		 
		 	 while(x>=48&&x<=57&&flag>=4) // FLAG》4，后面无所谓，只要是数字字母都是单词是单词
		   {flag++;
		    s8.zimu[flag]=x;
		    word++;
		   }
		 
		 
		 
		 
		  while(x==13)   //是换行
		  
		    hang++;
		 
	
	
	
	for(i=0;i<words;i++)  //有重复单词的吗？ 
	{
	  if(s8.value[i]==s8.value[words] )	
	  {s8.value[words]="0";
	   s8.pinlv[i]++     ;          //重复啦，自增1 ,去掉这个多余的单词 ，并记录频率 
	  	
	  }
		
		
	}
	
	
	
	
	for(i=0;i<words;i++)    //寻找频率最高的单词 
	{
		if(s8.pinlv[i]>s8.bijiao)
		 {s8.bijiao=s8.pinlv[i];
		    hh=i;    //hh记录这个频次最高的序号 
		 }
		 
		
		
	}
	
	
	
		 
		
		 
		
		   x=fgetc(fp);                //这里意在取下一个字符 

	
		
		
		
		if( feof(fp) )        //到末尾了？那就跳出循环吧 
      {
          break ;
         
      }
      
      
   
   
   j++;                    //统计字符数，包括换行空格 
	}
	while(1);
	
	
	
	for(i=0;i<words;i++)     //按词频(zidianxu)输出单词 
{   
  if(s8.pinlv[i]==s8.pinlv[i+1])    //如果词频一样 
    {
    	
    	for(j=0;j<255;j++)
	{  buff =s8.value[i];
	    e1[i]=buff[i];
	     e2[i]=buff[i+1];     //转移出来到char数组比较 
	 
	 } 
	 
	 for(j=0;j<255;j++)
	  {if(e1[j]==e2[j])   //前面有部分相似 
	      jj++;
	  
	   if(e1[j]>e2[j])   //如果 前一个顺序在后面，就先输出第二个 
	     cout<<s8.value[i+1] ;
	     
	   if(e1[i<e2[i]])   //否则输出第一个 
	   cout<s8.value[i];
	  
	  
	  }
	 
	
	} 
	
}




	cout<<"计算完成"<<endl;
	
	cout<<hang<<endl;
	
	cout<<j<<endl;
	return 0;
	
}
